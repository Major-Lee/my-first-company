/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.bhu.vas.business.spark.streaming.wifistasniffer.startup;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.PostConstruct;
import javax.annotation.Resource;

import org.apache.spark.SparkConf;
import org.apache.spark.streaming.Durations;
import org.apache.spark.streaming.api.java.JavaDStream;
import org.apache.spark.streaming.api.java.JavaPairDStream;
import org.apache.spark.streaming.api.java.JavaPairReceiverInputDStream;
import org.apache.spark.streaming.api.java.JavaStreamingContext;
import org.apache.spark.streaming.kafka.KafkaUtils;
import org.springframework.stereotype.Service;

import com.bhu.vas.api.dto.wifistasniffer.WifistasnifferItemRddto;
import com.bhu.vas.api.dto.wifistasniffer.WifistasnifferRddto;
import com.bhu.vas.business.spark.streaming.wifistasniffer.action.WifiStasnifferForeachRDDAction;
import com.bhu.vas.business.spark.streaming.wifistasniffer.conf.WifistasnifferRuntimeConf;
import com.bhu.vas.business.spark.streaming.wifistasniffer.transform.WifiStasnifferToPairTransform;
import com.bhu.vas.business.spark.streaming.wifistasniffer.transform.WifiStasnifferToRddtoIterableTransform;
import com.bhu.vas.business.spark.streaming.wifistasniffer.transform.WifiStasnifferToRddtoTransform;
/**
 * 运行spark任务
 * @author tangzichao
 *
 */
@Service
@SuppressWarnings("serial")
public class WifiStasnifferMain implements Serializable{
	
	@Resource
	private WifiStasnifferForeachRDDAction wifiStasnifferForeachRDDAction;
	
	@Resource
	private WifiStasnifferToRddtoTransform wifiStasnifferToRddtoTransform;
	
	@Resource
	private WifiStasnifferToRddtoIterableTransform wifiStasnifferToRddtoIterableTransform;
	
	@Resource
	private WifiStasnifferToPairTransform wifiStasnifferToPairTransform;
	
	@PostConstruct
	public void initialize() {
		//SparkTaskLog.wifistasniffer().info("WifiStasniffer start initialize");
		// Create the context with a 10 second batch size
		SparkConf sparkConf = new SparkConf();
		JavaStreamingContext ssc = new JavaStreamingContext(sparkConf, Durations.seconds(WifistasnifferRuntimeConf.duration));

		// Create a JavaReceiverInputDStream on target ip:port and count the
		// words in input stream of \n delimited text (eg. generated by 'nc')
		// Note that no duplication in storage level only for running locally.
		// Replication necessary in distributed scenario for fault tolerance.
	    //JavaReceiverInputDStream<String> lines = ssc.receiverStream(new TerminalScanReceiver());
	    Map<String, Integer> topicMap = new HashMap<String, Integer>();
	    topicMap.put(WifistasnifferRuntimeConf.kafka_topic_name, WifistasnifferRuntimeConf.kafka_consumer_threads);
	    
		JavaPairReceiverInputDStream<String, String> kafka_messages =
	            KafkaUtils.createStream(ssc, WifistasnifferRuntimeConf.kafka_zookeeper, 
	            		WifistasnifferRuntimeConf.kafka_consumer_group, topicMap);
		
		JavaDStream<WifistasnifferRddto> step1_toRddto = kafka_messages.map(wifiStasnifferToRddtoTransform);
		JavaDStream<WifistasnifferItemRddto> step2_toRddtoIterable = step1_toRddto.flatMap(wifiStasnifferToRddtoIterableTransform);
//		JavaPairDStream<String, TerminalScanStreamingDTO> pairs = map_dtos.mapToPair(new TerminalScanDtoToPair());
//		JavaPairDStream<String, Iterable<TerminalScanStreamingDTO>> group_dtos = pairs.groupByKey();
		JavaPairDStream<String, WifistasnifferItemRddto> step3_toPair = step2_toRddtoIterable.mapToPair(wifiStasnifferToPairTransform);
		JavaPairDStream<String, Iterable<WifistasnifferItemRddto>> step4_toGroupPair = step3_toPair.groupByKey();
		step4_toGroupPair.foreachRDD(wifiStasnifferForeachRDDAction);
		
		ssc.start();
		ssc.awaitTermination();
	}
	


}
