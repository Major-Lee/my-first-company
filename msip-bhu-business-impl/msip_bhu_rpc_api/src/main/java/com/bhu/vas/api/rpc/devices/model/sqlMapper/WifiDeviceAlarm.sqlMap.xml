<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bhu.vas.api.rpc.devices.model.WifiDeviceAlarm">

  <resultMap id="modelResult" type="wifiDeviceAlarm">
    <id property="id" column="id"/>
    <result property="name" column="name"/>
    <result property="trapname" column="trapname"/>
    <result property="serial_number" column="serial_number"/>
    <result property="ne_name" column="ne_name"/>
    <result property="mac_addr" column="mac_addr"/>
    <result property="alarm_level" column="alarm_level"/>
    <result property="alarm_type" column="alarm_type"/>
    <result property="alarm_cause" column="alarm_cause"/>
    <result property="alarm_reason" column="alarm_reason"/>
    <result property="alarm_event_time" column="alarm_event_time"/>
    <result property="alarm_status" column="alarm_status"/>
    <result property="alarm_title" column="alarm_title"/>
    <result property="alarm_content" column="alarm_content"/>
    <result property="alarm_serial_id" column="alarm_serial_id"/>
    <result property="created_at" column="created_at"/>
    <result property="updated_at" column="updated_at"/>
  </resultMap>  
  
  	<sql id="modelTableName">
	    <![CDATA[
	    	t_wifi_devices_alarm
	    ]]>
	</sql>
	<sql id="modelColumns">
	    <![CDATA[
	    	id,
	    	name,
	    	trapname,
	    	serial_number,
	    	ne_name,
	    	mac_addr,
	    	alarm_level,
	    	alarm_type,
	    	alarm_cause,
	    	alarm_reason,
	    	alarm_event_time,
	    	alarm_status,
	    	alarm_title,
	    	alarm_content,
	    	alarm_serial_id,
	    	created_at,
	    	updated_at
	    ]]>
	</sql>  
	<sql id="modelWithoutPKColumns">
	    <![CDATA[
	    	name,
	    	trapname,
	    	serial_number,
	    	ne_name,
	    	mac_addr,
	    	alarm_level,
	    	alarm_type,
	    	alarm_cause,
	    	alarm_reason,
	    	alarm_event_time,
	    	alarm_status,
	    	alarm_title,
	    	alarm_content,
	    	alarm_serial_id,
	    	created_at,
	    	updated_at
	    ]]>
	</sql>   
	
	<sql id="modelInsertValues">
			#{id},
			#{name},
	    	#{trapname},
	    	#{serial_number},
	    	#{ne_name},
	    	#{mac_addr},
	    	#{alarm_level},
	    	#{alarm_type},
	    	#{alarm_cause},
	    	#{alarm_reason},
	    	#{alarm_event_time},
	    	#{alarm_status},
	    	#{alarm_title},
	    	#{alarm_content},
	    	#{alarm_serial_id},
	    	#{created_at},
	    	#{updated_at}
	</sql> 
	
	<sql id="modelUpdateValues">
			name = #{name},
	    	trapname = #{trapname},
	    	serial_number = #{serial_number},
	    	ne_name = #{ne_name},
	    	mac_addr = #{mac_addr},
	    	alarm_level = #{alarm_level},
	    	alarm_type = #{alarm_type},
	    	alarm_cause = #{alarm_cause},
	    	alarm_reason = #{alarm_reason},
	    	alarm_event_time = #{alarm_event_time},
	    	alarm_status = #{alarm_status},
	    	alarm_title = #{alarm_title},
	    	alarm_content = #{alarm_content},
	    	alarm_serial_id = #{alarm_serial_id},
	    	updated_at = #{updated_at}
	</sql>
	<sql id="model_CRITERIA_SQL_GenCondition">
		<!--
			WARNING - @mbggenerated This element is automatically generated by
			MyBatis Generator, do not modify. This element was generated on Thu
			Sep 01 10:08:21 CST 2011.
		-->
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
                				</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
                				</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                				</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem" open="(" close=")" separator=",">
										#{listItem}
                  					</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	
	<select id="select" resultMap="modelResult">
	    select <include refid="modelColumns" /> from <include refid="modelTableName" /> 
	    <where>
	    	<if test="_parameter != null">
				id = #{id}
				<!-- 
					#{value}
					#{_parameter}
				 -->
			</if>
		</where>
	</select>
	
	<delete id="deleteByPrimaryKey" parameterType="int">
		delete from <include refid="modelTableName" /> where id=#{id}
	</delete>
	
	<delete id="delete" parameterType="wifiDeviceAlarm">
		delete from <include refid="modelTableName" />
		<where>
			<if test="id != null">
				id = #{id}
			</if>
		</where>
	</delete>
	
	<insert id="insert" parameterType="wifiDeviceAlarm">
		insert into <include refid="modelTableName" /> (<include refid="modelColumns" />) values (<include refid="modelInsertValues" />);
		<selectKey resultType="java.lang.Integer" keyProperty="id">
	    	select last_insert_id(); 
	    </selectKey>
	</insert>
 
	<update id="update" parameterType="wifiDeviceAlarm">
	    update <include refid="modelTableName" /> set <include refid="modelUpdateValues" /> WHERE id = #{id}
	</update>
		
	<select id="selectByIds" resultMap="modelResult" parameterType="java.util.List">
	  	select <include refid="modelColumns" /> from <include refid="modelTableName" />
	  	<where>
	  		id IN
	  		<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
			    #{item}
			</foreach>
	  	</where>
	</select>
	  
	<delete id="deleteByIds" parameterType="java.util.List">
	  	delete from <include refid="modelTableName" />
	  	<where>
	  		id IN
	  		<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
			    #{item}
			</foreach>
	  	</where>
	</delete>
	
	<select id="pkSelectByModelCriteria" resultType="int">
		select id from <include refid="modelTableName" /> 
		<if test="_parameter != null"> 
	     	<include refid="model_CRITERIA_SQL_GenCondition" />
	      	<if test="orderByClause != null">
				order by ${orderByClause}
	    	</if>
			<if test="start!=0 or limit!=0">
				limit #{limit} OFFSET #{start}
			</if>
	    </if>  
	</select>
	
	<select id="countByModelCriteria" resultType="int">
		select count(*) from <include refid="modelTableName" /> 
		<if test="_parameter != null"> 
	      <include refid="model_CRITERIA_SQL_GenCondition" />
	    </if>  		
	</select>
	
	<delete id="removeByModelCriteria">
		delete from <include refid="modelTableName" />  
		<if test="_parameter != null"> 
	      <include refid="model_CRITERIA_SQL_GenCondition" />
    	</if>  
	</delete>
	
	<select id="executeSql" parameterType="String" resultType="int">  
    	${value} 
	</select> 
</mapper>